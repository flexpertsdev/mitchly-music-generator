// deploy-functions.js
import { execSync } from 'child_process';
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

class AppwriteFunctionDeployer {
  constructor(projectId, apiKey) {
    this.projectId = projectId;
    this.apiKey = apiKey;
    this.functions = [];
  }
  
  /**
   * Load function configuration
   */
  loadFunctionConfig(functionDir) {
    const configPath = join(functionDir, 'appwrite.json');
    
    if (!existsSync(configPath)) {
      throw new Error(`No appwrite.json found in ${functionDir}`);
    }
    
    const config = JSON.parse(readFileSync(configPath, 'utf8'));
    const functionName = Object.keys(config)[0];
    
    return {
      name: functionName,
      path: functionDir,
      config: config[functionName]
    };
  }
  
  /**
   * Deploy a single function
   */
  async deployFunction(functionInfo) {
    const { name, path, config } = functionInfo;
    
    console.log(`\nüöÄ Deploying function: ${name}`);
    console.log(`   Path: ${path}`);
    
    try {
      // Check if function exists
      let functionId;
      try {
        const listCmd = `appwrite functions list --projectId ${this.projectId} --parseOutput --limit 100`;
        const functions = JSON.parse(execSync(listCmd, { encoding: 'utf8' }));
        const existingFunction = functions.functions.find(f => f.name === config.name);
        
        if (existingFunction) {
          functionId = existingFunction.$id;
          console.log(`   Found existing function: ${functionId}`);
          
          // Update function
          const updateCmd = `appwrite functions update \\
            --functionId ${functionId} \\
            --name "${config.name}" \\
            --runtime "${config.runtime}" \\
            --execute ${JSON.stringify(config.execute)} \\
            --events ${JSON.stringify(config.events)} \\
            --schedule "${config.schedule}" \\
            --timeout ${config.timeout} \\
            --enabled ${config.enabled} \\
            --logging ${config.logging} \\
            --projectId ${this.projectId}`;
          
          execSync(updateCmd, { stdio: 'inherit' });
        } else {
          // Create new function
          console.log('   Creating new function...');
          const createCmd = `appwrite functions create \\
            --functionId "unique()" \\
            --name "${config.name}" \\
            --runtime "${config.runtime}" \\
            --execute ${JSON.stringify(config.execute)} \\
            --events ${JSON.stringify(config.events)} \\
            --schedule "${config.schedule}" \\
            --timeout ${config.timeout} \\
            --enabled ${config.enabled} \\
            --logging ${config.logging} \\
            --projectId ${this.projectId} \\
            --parseOutput`;
          
          const result = JSON.parse(execSync(createCmd, { encoding: 'utf8' }));
          functionId = result.$id;
          console.log(`   Created function: ${functionId}`);
        }
      } catch (error) {
        console.error('   Error checking/creating function:', error.message);
        throw error;
      }
      
      // Update environment variables
      console.log('   Updating environment variables...');
      for (const [key, value] of Object.entries(config.variables)) {
        try {
          const envCmd = `appwrite functions update-variable \\
            --functionId ${functionId} \\
            --key "${key}" \\
            --value "${value}" \\
            --projectId ${this.projectId}`;
          
          execSync(envCmd, { stdio: 'pipe' });
        } catch (error) {
          // Variable might already exist, try to update it
          console.log(`   Variable ${key} might already exist, skipping...`);
        }
      }
      
      // Deploy the code
      console.log('   Deploying code...');
      const deployCmd = `appwrite functions create-deployment \\
        --functionId ${functionId} \\
        --entrypoint "${config.entrypoint}" \\
        --commands "${config.commands}" \\
        --code "${path}" \\
        --activate true \\
        --projectId ${this.projectId} \\
        --parseOutput`;
      
      const deployment = JSON.parse(execSync(deployCmd, { encoding: 'utf8' }));
      console.log(`   ‚úÖ Deployment created: ${deployment.$id}`);
      
      // Wait for deployment to be ready
      console.log('   Waiting for deployment to be ready...');
      await this.waitForDeployment(functionId, deployment.$id);
      
      return {
        functionId,
        deploymentId: deployment.$id,
        success: true
      };
      
    } catch (error) {
      console.error(`   ‚ùå Error deploying ${name}:`, error.message);
      return {
        functionId: null,
        deploymentId: null,
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * Wait for deployment to be ready
   */
  async waitForDeployment(functionId, deploymentId, maxAttempts = 30) {
    for (let i = 0; i < maxAttempts; i++) {
      try {
        const cmd = `appwrite functions get-deployment \\
          --functionId ${functionId} \\
          --deploymentId ${deploymentId} \\
          --projectId ${this.projectId} \\
          --parseOutput`;
        
        const deployment = JSON.parse(execSync(cmd, { encoding: 'utf8' }));
        
        if (deployment.status === 'ready') {
          console.log('   ‚úÖ Deployment is ready!');
          return true;
        } else if (deployment.status === 'failed') {
          throw new Error(`Deployment failed: ${deployment.stderr}`);
        }
        
        console.log(`   Status: ${deployment.status}... (attempt ${i + 1}/${maxAttempts})`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (error) {
        console.error('   Error checking deployment status:', error.message);
      }
    }
    
    throw new Error('Deployment timeout');
  }
  
  /**
   * Deploy all functions
   */
  async deployAll(functionDirs) {
    console.log('üöÄ Starting Appwrite Functions Deployment');
    console.log(`   Project ID: ${this.projectId}`);
    console.log(`   Functions to deploy: ${functionDirs.length}`);
    
    const results = [];
    
    for (const dir of functionDirs) {
      try {
        const functionInfo = this.loadFunctionConfig(dir);
        const result = await this.deployFunction(functionInfo);
        results.push({
          ...functionInfo,
          ...result
        });
      } catch (error) {
        console.error(`Error with ${dir}:`, error.message);
        results.push({
          name: dir,
          success: false,
          error: error.message
        });
      }
    }
    
    // Summary
    console.log('\nüìä Deployment Summary:');
    console.log('====================');
    
    const successful = results.filter(r => r.success);
    const failed = results.filter(r => !r.success);
    
    console.log(`‚úÖ Successful: ${successful.length}`);
    successful.forEach(r => {
      console.log(`   - ${r.name} (${r.functionId})`);
    });
    
    if (failed.length > 0) {
      console.log(`\n‚ùå Failed: ${failed.length}`);
      failed.forEach(r => {
        console.log(`   - ${r.name}: ${r.error}`);
      });
    }
    
    return results;
  }
}

// Main execution
async function main() {
  // Check for required environment variables
  if (!process.env.APPWRITE_PROJECT_ID || !process.env.APPWRITE_API_KEY) {
    console.error('Missing required environment variables:');
    console.error('- APPWRITE_PROJECT_ID');
    console.error('- APPWRITE_API_KEY');
    process.exit(1);
  }
  
  // Check if Appwrite CLI is installed
  try {
    execSync('appwrite --version', { stdio: 'pipe' });
  } catch (error) {
    console.error('Appwrite CLI is not installed or not in PATH');
    console.error('Install it with: npm install -g appwrite');
    process.exit(1);
  }
  
  // Configure Appwrite CLI
  console.log('Configuring Appwrite CLI...');
  execSync(`appwrite client --endpoint https://cloud.appwrite.io/v1`, { stdio: 'pipe' });
  execSync(`appwrite client --projectId ${process.env.APPWRITE_PROJECT_ID}`, { stdio: 'pipe' });
  execSync(`appwrite client --key ${process.env.APPWRITE_API_KEY}`, { stdio: 'pipe' });
  
  // Functions to deploy
  const functionDirs = [
    './appwrite-functions/generate-lyrics',
    './appwrite-functions/generate-audio',
    './appwrite-functions/poll-audio-status'
  ];
  
  // Deploy
  const deployer = new AppwriteFunctionDeployer(
    process.env.APPWRITE_PROJECT_ID,
    process.env.APPWRITE_API_KEY
  );
  
  try {
    await deployer.deployAll(functionDirs);
  } catch (error) {
    console.error('Deployment failed:', error.message);
    process.exit(1);
  }
}

// Run if called directly
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  main();
}

export { AppwriteFunctionDeployer };