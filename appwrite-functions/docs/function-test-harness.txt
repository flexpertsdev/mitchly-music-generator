// test/test-function.js
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import dotenv from 'dotenv';

// Load environment variables
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, '..', '.env') });

/**
 * Test harness for Appwrite Functions
 * Simulates the Appwrite runtime environment
 */
class FunctionTestHarness {
  constructor(functionPath) {
    this.functionPath = functionPath;
    this.logs = [];
    this.errors = [];
  }
  
  /**
   * Create a mock context object that mimics Appwrite's runtime
   */
  createContext(req = {}, customHeaders = {}) {
    // Default headers that Appwrite provides
    const defaultHeaders = {
      'x-appwrite-trigger': 'event',
      'x-appwrite-event': 'databases.*.collections.*.documents.*.update',
      'x-appwrite-user-id': 'test-user-123',
      'x-appwrite-key': process.env.TEST_API_KEY || 'test-api-key'
    };
    
    return {
      req: {
        method: req.method || 'POST',
        headers: { ...defaultHeaders, ...customHeaders },
        body: req.body || {},
        query: req.query || {},
        url: req.url || 'http://localhost/v1/functions/test',
        path: req.path || '/v1/functions/test'
      },
      res: {
        json: (data, statusCode = 200) => {
          return { type: 'json', data, statusCode };
        },
        text: (data, statusCode = 200, headers = {}) => {
          return { type: 'text', data, statusCode, headers };
        },
        empty: () => {
          return { type: 'empty', statusCode: 204 };
        },
        redirect: (url, statusCode = 301) => {
          return { type: 'redirect', url, statusCode };
        }
      },
      log: (...args) => {
        const message = args.join(' ');
        this.logs.push(message);
        console.log('[LOG]', message);
      },
      error: (...args) => {
        const message = args.join(' ');
        this.errors.push(message);
        console.error('[ERROR]', message);
      }
    };
  }
  
  /**
   * Run the function with the given context
   */
  async run(context) {
    try {
      // Import the function dynamically
      const functionModule = await import(this.functionPath);
      const functionHandler = functionModule.default;
      
      if (typeof functionHandler !== 'function') {
        throw new Error('Function must export a default function');
      }
      
      // Run the function
      const startTime = Date.now();
      const result = await functionHandler(context);
      const endTime = Date.now();
      
      console.log(`\n[EXECUTION TIME] ${endTime - startTime}ms`);
      
      return {
        success: true,
        result,
        logs: this.logs,
        errors: this.errors,
        executionTime: endTime - startTime
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        stack: error.stack,
        logs: this.logs,
        errors: this.errors
      };
    }
  }
  
  /**
   * Clear logs and errors
   */
  reset() {
    this.logs = [];
    this.errors = [];
  }
}

// Example test scripts for each function

// Test generate-lyrics function
export async function testGenerateLyrics() {
  console.log('\n=== Testing Generate Lyrics Function ===\n');
  
  const harness = new FunctionTestHarness('../src/index.js');
  
  // Mock event data
  const mockEvent = {
    $id: 'test-song-123',
    $collection: 'songs',
    title: 'Summer Dreams',
    trackNumber: '3',
    status: 'generating',
    bandId: 'test-band-456',
    description: 'An upbeat summer anthem',
    aiInstructions: 'Make it energetic and nostalgic',
    primaryGenre: 'Pop Rock'
  };
  
  const context = harness.createContext({
    body: mockEvent
  });
  
  const result = await harness.run(context);
  
  console.log('\n--- RESULT ---');
  console.log(JSON.stringify(result, null, 2));
  
  return result;
}

// Test generate-audio function
export async function testGenerateAudio() {
  console.log('\n=== Testing Generate Audio Function ===\n');
  
  const harness = new FunctionTestHarness('../generate-audio/src/index.js');
  
  const mockEvent = {
    $id: 'test-song-123',
    $collection: 'songs',
    title: 'Summer Dreams',
    audioStatus: 'generating',
    lyrics: '[Verse 1]\nSummer days are calling...',
    description: 'Upbeat pop rock summer anthem',
    artistDescription: 'Modern pop rock band'
  };
  
  const context = harness.createContext({
    body: mockEvent
  });
  
  const result = await harness.run(context);
  
  console.log('\n--- RESULT ---');
  console.log(JSON.stringify(result, null, 2));
  
  return result;
}

// Test poll-audio-status function
export async function testPollAudioStatus() {
  console.log('\n=== Testing Poll Audio Status Function ===\n');
  
  const harness = new FunctionTestHarness('../poll-audio-status/src/index.js');
  
  // This function is triggered by schedule, not events
  const context = harness.createContext({
    method: 'POST',
    body: {}
  });
  
  const result = await harness.run(context);
  
  console.log('\n--- RESULT ---');
  console.log(JSON.stringify(result, null, 2));
  
  return result;
}

// Run all tests
async function runAllTests() {
  const tests = [
    testGenerateLyrics,
    testGenerateAudio,
    testPollAudioStatus
  ];
  
  for (const test of tests) {
    try {
      await test();
    } catch (error) {
      console.error(`Test failed: ${error.message}`);
    }
  }
}

// If running directly
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  const testName = process.argv[2];
  
  switch (testName) {
    case 'lyrics':
      testGenerateLyrics();
      break;
    case 'audio':
      testGenerateAudio();
      break;
    case 'poll':
      testPollAudioStatus();
      break;
    default:
      runAllTests();
  }
}

// test/.env.example
APPWRITE_FUNCTION_API_ENDPOINT=https://cloud.appwrite.io/v1
APPWRITE_FUNCTION_PROJECT_ID=your-project-id
TEST_API_KEY=your-test-api-key
ANTHROPIC_API_KEY=your-anthropic-key
MUREKA_API_KEY=your-mureka-key